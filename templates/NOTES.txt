General Information
-------------------
Chart Name: {{ .Chart.Name }}
Chart Version: {{ .Chart.Version }}
App Version: {{ .Chart.AppVersion }}
Description: {{ .Chart.Description }}

Dependencies
------------
PostgreSQL Chart:
- Version: 15.5.7
- Repository: https://charts.bitnami.com/bitnami

Configuration Files
-------------------
1. configmap.yaml
   - Defines a ConfigMap named based on the release name.
   - Contains Flyway configuration such as URL, user, and migration locations.
2. pod.yaml
   - Defines a Kubernetes Job for running database migrations and the web application.
   - Uses an init container for Flyway migrations.
   - Main container serves the web application.
   - Includes environment variables for database connection and credentials.
3. secret.yaml
   - Contains secrets for database credentials and Docker registry credentials.
   - Secrets are base64 encoded.

Values File (values.yaml)
-------------------------
Image Configuration:
- Repository: {{ .Values.image.repository }}
- Tag: {{ .Values.image.tag }}
- Pull Policy: {{ .Values.image.pullPolicy }}

Init Container Image Configuration:
- Repository: {{ .Values.initContainerImage.repository }}
- Tag: {{ .Values.initContainerImage.tag }}
- Pull Policy: {{ .Values.initContainerImage.pullPolicy }}

PostgreSQL Configuration:
- Port: {{ .Values.postgresql.port }}
- Username, Password, Database: Configured via Helm values.
- Persistence: Enabled with storage class ebs-csi-encrypted and size 10Gi for both primary and secondary.

Namespace: {{ .Values.namespace }}

Secrets:
- Username: {{ .Values.secret.username }}
- Password: {{ .Values.secret.password }}
- Flyway Password: {{ .Values.secret.flyway_password }}
- Docker Config JSON: {{ .Values.secret.dockerconfigjson }}

Flyway Configuration:
- URL: {{ .Values.flyway.url }}
- User: {{ .Values.flyway.user }}
- Locations: {{ .Values.flyway.locations }}

Resource Management
-------------------
PostgreSQL Resources:
- Requests: 500m CPU, 3Gi Memory
- Limits: 1000m CPU, 4Gi Memory

Post-Installation Instructions
------------------------------
1. Get the status of your Helm release:
   ```shell
   helm status {{ .Release.Name }} -n {{ .Release.Namespace }}
